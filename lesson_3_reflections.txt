1. When would you want to use a remote repository rather than keeping all your work local?

if you need to work on a team and update your work so that others can see it. also can keep a backup online as well.
or if your branch is ready to be pushed online then you can push it to the remote repo.

2. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

so that it doesn't make changes you don't want yet. if someone updated
a remote repo and git automatically updated your local repo then it
might mess up your branch. it's better to pull changes when we need to
so things don't get cluttered and messy.

3. Describe the differences between forks, clones, and branches. When would you use one instead of another?

fork is cloning a repo from one github account to another. clone is
when you make a copy from a github repo to your local machine or when
you make a clone locally from one dir to another. branches happen when
you make a split from the main branch to work on a new feature without
tempering with existing code. you can then merge branches back together. when using push or pull we do so using a branch. we push a
branch up to a remote repo on github or we pull a branch down to our
local machine from github. you use clone when you want a local copy of
a repo. you use fork when making a clone on the server from another
user's repo.

4. What is the benefit of having a copy of the last known state of the remote stored locally?

so that we can work offline and still have the remote branch locally
to compare. we can edit the local copy of the remote branch or merge
it onto our own branches. it also tells us the state when we last
synched with the remote branch.

5. How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

to collaborate without using git or hub we would need to either meet
in person, on the phone, or on some video web service. then to share
the code we would have to use email or some service online or through
physical medium, or ssh. this would be much more cumbersome. using git
and hub makes it easier to send changes to a location where multiple
people can see it and work on it. it makes collaboration much easier.

6. When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

when you are working on a new feature and don't want to mess up the
main branch or work. it helps doing this way so that when your branch
is ready you can push it up after merging master into it to send a
pull request after online on gub so others can review your work before
making a decision. when working directly in master it is easy to go
back and forth using commits. the path is straightforward and simple.
this is better for solo work when the project isn't that big.
